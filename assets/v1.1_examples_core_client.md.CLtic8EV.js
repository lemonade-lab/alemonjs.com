import{_ as i,c as a,a2 as t,o as e}from"./chunks/framework.COMjntQY.js";const c=JSON.parse('{"title":"接口","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"v1.1/examples/core/client.md","filePath":"v1.1/examples/core/client.md","lastUpdated":1727417625000}'),l={name:"v1.1/examples/core/client.md"};function n(p,s,h,k,o,r){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="接口" tabindex="-1">接口 <a class="header-anchor" href="#接口" aria-label="Permalink to &quot;接口&quot;">​</a></h1><p>为保持原平台接口文档一致性,增加阅读便捷度,方法名会尽量采用接口同名声明</p><h2 id="客户端" tabindex="-1">客户端 <a class="header-anchor" href="#客户端" aria-label="Permalink to &quot;客户端&quot;">​</a></h2><p>用于直接调用接口的客户端对象</p><p>让开发框架不会因为兼容性导致接口缺失</p><p>同时能保持原生平台特有功能</p><h3 id="clientkoa" tabindex="-1">ClientKOA <a class="header-anchor" href="#clientkoa" aria-label="Permalink to &quot;ClientKOA&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ClientKOA } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;alemonjs&#39;</span></span></code></pre></div><h4 id="固定文件暴露" tabindex="-1">固定文件暴露 <a class="header-anchor" href="#固定文件暴露" aria-label="Permalink to &quot;固定文件暴露&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ClientKOA.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLocalFileUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;/plugins/point/public/img/ionc.png&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// url   http://[::]:port/api/xxx?address=/plugins/point/public/img/ionc.png</span></span></code></pre></div><h4 id="动态文件暴露" tabindex="-1">动态文件暴露 <a class="header-anchor" href="#动态文件暴露" aria-label="Permalink to &quot;动态文件暴露&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> img</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&lt;buffer-img xxx &gt;&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ClientKOA.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFileUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(img)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// url   http://[::]:port/api/xxx/1234567890.png</span></span></code></pre></div><h4 id="动态文件定时清除" tabindex="-1">动态文件定时清除 <a class="header-anchor" href="#动态文件定时清除" aria-label="Permalink to &quot;动态文件定时清除&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 60s 清一次</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当挂载服务启动时,该行为默认开启</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ClientKOA.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">autoClearFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="clientqq" tabindex="-1">ClientQQ <a class="header-anchor" href="#clientqq" aria-label="Permalink to &quot;ClientQQ&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ClientQQ } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;alemonjs&#39;</span></span></code></pre></div><blockquote><p>接口随平台同步更新</p></blockquote><blockquote><p>请直接翻阅源码查看参数</p></blockquote><blockquote><p><a href="https://github.com/lemonade-lab/alemonjs/blob/main/src/qq/sdk/" target="_blank" rel="noreferrer">ClientQQ 源码查看</a></p></blockquote><h3 id="clientkook" tabindex="-1">ClientKOOK <a class="header-anchor" href="#clientkook" aria-label="Permalink to &quot;ClientKOOK&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ClientKOOK } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;alemonjs&#39;</span></span></code></pre></div><blockquote><p>接口随平台同步更新</p></blockquote><blockquote><p>请直接翻阅源码查看参数</p></blockquote><p><a href="https://github.com/lemonade-lab/alemonjs/blob/main/src/kook/sdk/" target="_blank" rel="noreferrer">ClientKOOK 源码查看</a></p><h3 id="clientntqq" tabindex="-1">ClientNTQQ <a class="header-anchor" href="#clientntqq" aria-label="Permalink to &quot;ClientNTQQ&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ClientNTQQ } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;alemonjs&#39;</span></span></code></pre></div><blockquote><p>接口随平台同步更新</p></blockquote><blockquote><p>请直接翻阅源码查看参数</p></blockquote><p><a href="https://github.com/lemonade-lab/alemonjs/blob/main/src/ntqq/sdk/" target="_blank" rel="noreferrer">ClientNTQQ 源码查看</a></p>`,29)]))}const g=i(l,[["render",n]]);export{c as __pageData,g as default};
