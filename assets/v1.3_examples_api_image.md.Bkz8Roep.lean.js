import{_ as a,c as i,a2 as n,o as e}from"./chunks/framework.COMjntQY.js";const c=JSON.parse('{"title":"图片制作","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"v1.3/examples/api/image.md","filePath":"v1.3/examples/api/image.md","lastUpdated":1727417625000}'),l={name:"v1.3/examples/api/image.md"};function t(p,s,h,k,r,d){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="图片制作" tabindex="-1">图片制作 <a class="header-anchor" href="#图片制作" aria-label="Permalink to &quot;图片制作&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">注意</p><p>该模块设计已独立。 请阅读<a href="https://github.com/lemonade-lab/react-puppeteer" target="_blank" rel="noreferrer">react-puppeteer</a></p></div><h2 id="图床" tabindex="-1">图床 <a class="header-anchor" href="#图床" aria-label="Permalink to &quot;图床&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineAlemonConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;alemonjs&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineAlemonConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  imageStorage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 撰写任意图床的图片上传方法</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 对val进行哈希  并以哈希名进行命名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 尝试向平台调用哈希文件,如果该哈希文件不存在,则进行上传</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 上传成功在返回 url ,不成功则 false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div>`,4)]))}const g=a(l,[["render",t]]);export{c as __pageData,g as default};
